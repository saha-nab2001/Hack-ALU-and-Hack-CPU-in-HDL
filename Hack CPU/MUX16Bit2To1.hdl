// 16 bit 2 to 1 line MUX
CHIP MUX16Bit2To1 {
  IN a[16], b[16], s;
  OUT out[16];
  PARTS:
  Not(in=s, out=nots);
  And(a=nots, b = a[15], out = c15);
  And(a=s, b=b[15], out=d15);
  Or(a=c15, b=d15, out=out[15]);
  And(a=nots, b = a[14], out = c14);
  And(a=s, b=b[14], out=d14);
  Or(a=c14, b=d14, out=out[14]);
  And(a=nots, b = a[13], out = c13);
  And(a=s, b=b[13], out=d13);
  Or(a=c13, b=d13, out=out[13]);
  And(a=nots, b = a[12], out = c12);
  And(a=s, b=b[12], out=d12);
  Or(a=c12, b=d12, out=out[12]);
  And(a=nots, b = a[11], out = c11);
  And(a=s, b=b[11], out=d11);
  Or(a=c11, b=d11, out=out[11]);
  And(a=nots, b = a[10], out = c10);
  And(a=s, b=b[10], out=d10);
  Or(a=c10, b=d10, out=out[10]);
  And(a=nots, b = a[9], out = c9);
  And(a=s, b=b[9], out=d9);
  Or(a=c9, b=d9, out=out[9]);
  And(a=nots, b = a[8], out = c8);
  And(a=s, b=b[8], out=d8);
  Or(a=c8, b=d8, out=out[8]);
  And(a=nots, b = a[7], out = c7);
  And(a=s, b=b[7], out=d7);
  Or(a=c7, b=d7, out=out[7]);
  And(a=nots, b = a[6], out = c6);
  And(a=s, b=b[6], out=d6);
  Or(a=c6, b=d6, out=out[6]);
  And(a=nots, b = a[5], out = c5);
  And(a=s, b=b[5], out=d5);
  Or(a=c5, b=d5, out=out[5]);
  And(a=nots, b = a[4], out = c4);
  And(a=s, b=b[4], out=d4);
  Or(a=c4, b=d4, out=out[4]);
  And(a=nots, b = a[3], out = c3);
  And(a=s, b=b[3], out=d3);
  Or(a=c3, b=d3, out=out[3]);
  And(a=nots, b = a[2], out = c2);
  And(a=s, b=b[2], out=d2);
  Or(a=c2, b=d2, out=out[2]);
  And(a=nots, b = a[1], out = c1);
  And(a=s, b=b[1], out=d1);
  Or(a=c1, b=d1, out=out[1]);
  And(a=nots, b = a[0], out = c0);
  And(a=s, b=b[0], out=d0);
  Or(a=c0, b=d0, out=out[0]);
}
